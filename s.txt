if(game_paused) {
	image_speed = 0;
	return;
}

// Get direction from speed
this.dirx = Math.sign(vx);
this.diry = Math.sign(vy);
if(this.dirx != 0) this.dirx_last = this.dirx;
if(this.diry != 0) this.diry_last = this.diry;

// - Controls and movement -
if(!this.dead) {
	this.mode.update(this);
	// Jumping
	if(input_pressed(k_up, k_jump, vk_w)) {
		game_started = true;
		this.jumpbuffer = this.jumpbuffer_max;
	}
	
	if(input_released(k_up, k_jump, vk_w) && this.diry == -1 && !this.jumpbrake_disabled ) {
		this.vy *= this.jumpbrake;
	}
	
	if(this.jumpbuffer > 0) {
		this.mode.jump(this);
		this.jumpbuffer -= 1;
	}
	
	// Falling
	if(!this.grounded) {
		this.vy += this.gravity;
		if(this.coyote > 0) this.coyote -= 1;
	} else {
		this.coyote = this.coyote_max;
	}
	
	// Limit and apply speed	
	if(this.vx > this.vx_max) this.vx = this.vx_max;
	if(this.vx < -this.vx_max) this.vx = -this.vx_max;
	x += this.vx;
	y += this.vy;
	x += this.vxe;
	y += this.vye;
	this.vxe = 0;
	this.vye = 0;

	// Horizontal movement
	this.keyx = (input_down_int(k_right, vk_d) - input_down_int(k_left, vk_a));
	if(keyx != 0) {
		game_started = true;
		this.sprite_dir = this.keyx;
		this.vx += this.accel * this.keyx;
		if(this.grounded) image_speed = 0.25;
	}
	else {
		if(grounded) this.vx = this.vx * this.friction;
		if(!grounded) this.vx = this.vx * this.airfriction;
		image_speed = 0;
		image_index = 0;
	}
}

// Additional check for stompable enemies, things are a bit messy for now, will make it better later
let stompable = place_meeting(x, y+vy, o_enemy_rat);
if(stompable == null) stompable = place_meeting(x, y+vy, o_enemy_ratheli);
if(stompable == null) stompable = place_meeting(x, y+vy, o_enemy_missile);
if(stompable == null) stompable = place_meeting(x, y+vy, o_enemy_rathuge);
if(stompable != null && this.vy > 0) {
	this.try_stomp(other);
}

// - Collision detection -
// Vertical
if((place_meeting(x, y+this.vy, o_dev_solid) != null || place_meeting(x, y+this.vy, o_trampoline)) && diry != 0) {
	this.mode.on_collision_v(this);
}

if(this.vy != 0 && this.diry != 0 && place_meeting(x, y+this.vy, o_dev_solid) != null) {
	while(place_meeting(x, y+this.vy, o_dev_solid) != null) {
		this.vy -= this.diry;
	}
	y += this.vy;
	this.vy = 0;
}

// Horizontal
if((place_meeting(x+this.vx, y, o_dev_solid) != null || place_meeting(x+this.vx, y, o_trampoline)) && dirx != 0) {
	this.mode.on_collision_h(this);
}

if(place_meeting(x+this.keyx, y, o_dev_solid) != null || place_meeting(x+this.keyx, y, o_trampoline)) {
    this.vx = 0;
}

if(this.vx != 0 && place_meeting(x+this.vx, y, o_dev_solid) != null && dirx != 0) {
	while(place_meeting(x+this.vx, y, o_dev_solid) != null) {
		this.vx -= this.dirx;
	}
	x += this.vx;
	this.vx = 0;
}

// Check if the player's touching the ground
if(place_meeting(x, y+1, o_dev_solid) != null && place_meeting(x, y+1, o_trampoline) == null) {
	this.grounded = true;
	this.jumpbrake_disabled = false;
} else {
	this.grounded = false;
}

// Collision with moving platforms
let platform;
if(vy > 0.01) platform = place_meeting(x, y+this.vy+2, o_platform);
if(platform != null && platform.y > y) {
	this.mode.on_collision_v(this);
	y = platform.y - sprite_index.yoffset + platform.vy;
	this.vxe = platform.vx * 2; // GHETTO FIX LOL !!!!!!!!!!!!!!
	this.vye = platform.vy;
	this.vy = 0;
	this.grounded = true;
}

// Anti-stuck
if(place_meeting(x, y, o_dev_solid) == null) {
	this.xsafe = x;
	this.ysafe = y;
}
else {
	x = this.xsafe;
	y = this.ysafe;
}

// Trampoline interaction
let trmp = place_meeting(x, y+2, o_trampoline);
if(trmp == null) trmp = place_meeting(x, y-2, o_trampoline); 
if(trmp != null) {
	sound_c_play(snd_trampoline);
	this.vy = (-this.jumppower * this.jumptrampoline)*trmp.dir;
	this.jumpbrake_disabled = true;
	trmp.image_speed = 0.5;
}

// Conveyor belt interaction
if(place_meeting(x, y+2, o_conveyor_l)) this.vxe = -2;
if(place_meeting(x, y+2, o_conveyor_r)) this.vxe = 2;

// Dying conditions
if(place_meeting(x, y, o_dev_hazard) != null) { this.die(); }
if(place_meeting(x, y, o_enemy_cactus) != null) { this.die(); }
if(place_meeting(x, y, o_enemy_spikes) != null) { this.die(); }
if(place_meeting(x, y, o_enemy_crusher) != null) { this.die(); }
if(y-sprite_index.height > room_height) { this.die(); }
if(x+sprite_index.width < room_viewport_x - player_death_margin) { this.die(); }



